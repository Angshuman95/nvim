local config = {}

function config.cmp()
    local cmp = require('cmp')

    local lsp_symbols = {
        Text = ' Ôíû  (Text) ',
        Method = ' Ôö¶  (Method)',
        Function = ' Ôûî  (Function)',
        Constructor = ' Ôê•  (Constructor)',
        Field = ' Ô¥≤  (Field)',
        Variable = '[Óúñ] (Variable)',
        Class = ' Ô†ñ  (Class)',
        Interface = ' Ô∞Æ  (Interface)',
        Module = ' Ôô®  (Module)',
        Property = ' Ô™∂ (Property)',
        Unit = ' Ôëµ  (Unit)',
        Value = ' Ô¢ü  (Value)',
        Enum = ' Ô©ó (Enum)',
        Keyword = ' Ô†ä  (Keyword)',
        Snippet = ' ÔÉÑ  (Snippet)',
        Color = ' Ô£ó  (Color)',
        File = ' Ôúì  (File)',
        Reference = ' Ôúú  (Reference)',
        Folder = ' Ôùä  (Folder)',
        EnumMember = ' ÔÖù  (EnumMember)',
        Constant = ' Ô≤Ä  (Constant)',
        Struct = ' Ô≥§  (Struct)',
        Event = ' ÔÉß  (Event)',
        Operator = ' Ôó´  (Operator)',
        TypeParameter = ' ÔûÉ  (TypeParameter)'
    }

    cmp.setup {
        mapping = {
            ['<C-p>'] = cmp.mapping.select_prev_item(),
            ['<C-n>'] = cmp.mapping.select_next_item(),
            ['<C-d>'] = cmp.mapping.scroll_docs(-4),
            ['<C-f>'] = cmp.mapping.scroll_docs(4),
            ['<C-Space>'] = cmp.mapping.complete(),
            ['<C-e>'] = cmp.mapping.close(),
            ['<CR>'] = cmp.mapping.confirm({
                behavior = cmp.ConfirmBehavior.Replace,
                select = true
            }),
            ['<Tab>'] = cmp.mapping(cmp.mapping.select_next_item(), {'i', 's'}),
            ['<S-Tab>'] = cmp.mapping(cmp.mapping.select_prev_item(), {'i', 's'})
        },
        formatting = {
            format = function(entry, item)
                item.kind = lsp_symbols[item.kind]
                item.menu = ({
                    nvim_lsp = '[LSP]',
                    buffer = '[Buffer]',
                    path = '[Path]',
                    vsnip = '[Vsnip]'
                })[entry.source.name]
                return item
            end
        },
        sources = {
            { name = 'nvim_lsp' }, { name = 'vsnip' }, { name = 'path' },
            { name = 'buffer' }
        },
        snippet = {
            expand = function(args)
                vim.fn['vsnip#anonymous'](args.body)
            end
        }
    }
end

function config.telescope()
    if not packer_plugins['plenary.nvim'].loaded or
        not packer_plugins['popup.nvim'].loaded then
        vim.cmd [[packadd plenary.nvim]]
        vim.cmd [[packadd popup.nvim]]
        vim.cmd [[packadd telescope-fzy-native.nvim]]
        vim.cmd [[packadd telescope-project.nvim]]
    end
    require('telescope').setup {
        defaults = {
            prompt_prefix = 'üî≠ ',
            layout_config = {prompt_position = 'top'},
            selection_caret = "ÔÅ° ",
            sorting_strategy = 'ascending',
            file_previewer = require'telescope.previewers'.vim_buffer_cat.new,
            grep_previewer = require'telescope.previewers'.vim_buffer_vimgrep
                .new,
            qflist_previewer = require'telescope.previewers'.vim_buffer_qflist
                .new
        },
        extensions = {
            fzy_native = {
                override_generic_sorter = false,
                override_file_sorter = true
            }
        }
    }

    require('telescope').load_extension('project')
    require('telescope').load_extension('fzy_native')

end

function config.lspkind()
    require("lspkind").init({
        with_text = true,
        symbol_map = {
            Text = "Óòí",
            Method = "∆í",
            Function = "ÔÇö",
            Constructor = "Óàè",
            Variable = "Óûõ",
            Class = "ÓÉç",
            Interface = "Ô∞Æ",
            Module = "Ô£ñ",
            Property = "Óò§",
            Unit = "Ôëµ",
            Value = "Ô¢ü",
            Enum = "‰∫Ü",
            Keyword = "Ô†Ö",
            Snippet = "Ô¨å",
            Color = "Óà´",
            File = "ÔÖõ",
            Folder = "ÔÑï",
            EnumMember = "ÔÖù",
            Constant = "Óà¨",
            Struct = "ÔÉä"
        }
    })
end

function config.emmet() vim.g.user_emmet_mode = "inv" end

return config
